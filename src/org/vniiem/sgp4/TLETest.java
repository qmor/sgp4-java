package org.vniiem.sgp4;

import static org.junit.Assert.*;

import java.time.temporal.ChronoUnit;
import java.util.ArrayList;

import javax.vecmath.Vector4d;

import org.junit.Before;
import org.junit.Test;

public class TLETest {
	int test_number = 0;
	ArrayList<String[]> tles = new ArrayList<>();
	ArrayList<double[]> timespans = new ArrayList();
	ArrayList<double[]> answers = new ArrayList();
	void RunTle(Tle tle, double start, double end, double inc)
	{
		int step = 0;
		double current = start;
		SGP4 model = new SGP4();
		try {
			model.SetTle(tle);
		} catch (SatelliteException e1) {
			e1.printStackTrace();
		}
		boolean running = true;
		boolean first_run = true;

		System.out.println(String.format("Running test with NORAD spacecraft number %05d" , tle.NoradNumber()));
		while (running)
		{
			boolean error = false;
			Vector4d position = new Vector4d();
			Vector4d velocity = new Vector4d();
			double tsince = 0;

			try
			{
				if (first_run && current != 0.0) 
				{
					/*
					 * make sure first run is always as zero
					 */
					tsince = 0.0;
				}
				else
				{
					/*
					 * otherwise run as normal
					 */
					tsince = current;
				}

				Eci eci = model.FindPosition(tsince);
				position = eci.Position();
				velocity = eci.Velocity();
			}
			catch (SatelliteException e)
			{
				System.out.println(e.getMessage());
				error = true;
				running = false;
			}
			catch (DecayedException e)
			{
				System.out.println(e.getMessage());

				position = e.Position();
				velocity = e.Velocity();

				if (!first_run)
				{
					// print out position on first run
					error = true;
				}

				running = false;
			}

			if (!error)
			{
				System.out.println(String.format("tsince (minutes) %f",tsince));
				System.out.println(String.format("pos (ECI, km) %f %f %f vel", position.x,position.y,position.z));
				System.out.println(String.format("vel (ECI km/sec) %f %f %f", velocity.x,velocity.y,velocity.z));
				System.out.println("");
				double eps = 1e-8;
				assertEquals(answers.get(test_number)[step*7], tsince,eps);

				assertEquals(answers.get(test_number)[step*7+1], position.x,eps);
				assertEquals(answers.get(test_number)[step*7+2], position.y,eps);
				assertEquals(answers.get(test_number)[step*7+3], position.z,eps);

				assertEquals(answers.get(test_number)[step*7+4], velocity.x,eps);
				assertEquals(answers.get(test_number)[step*7+5], velocity.y,eps);
				assertEquals(answers.get(test_number)[step*7+6], velocity.z,eps);
				step++;
			}

			if ((first_run && current == 0.0) || !first_run)
			{
				if (current == end)
				{
					running = false;
				}
				else if (current + inc > end)
				{
					current = end;
				}
				else
				{
					current += inc;
				}
			}
			first_run = false;
		}
	}
	@Before
	public void prepare()
	{

		tles.add(new String[] {"# TEME example",
				"1 00005U 58002B   00179.78495062  .00000023  00000-0  28098-4 0  4753",
		"2 00005  34.2682 348.7242 1859667 331.7664  19.3264 10.82419157413667"});

		timespans.add(new double[] { 0.00,      4320.0,        360.00});

		answers.add(new double[] 
				{0.00000000, 7022.46529323,-1400.08296651, 0.03995232, 1.893841014, 6.405893759, 4.534807250
						,  360.00000000,-7154.03120198,-3783.17682500,-3536.19412291, 4.741887409,-4.151817765,-2.093935425
						,  720.00000000,-7134.59340137, 6531.68641318, 3260.27186469,-4.113793027,-2.911922039,-2.557327851
						, 1080.00000000, 5568.53901190, 4492.06992616, 3863.87642001,-4.209106475, 5.159719888, 2.744852979
						, 1440.00000000, -938.55923880,-6268.18748806,-4294.02924724, 7.536105210,-0.427127707, 0.989878080
						, 1800.00000000,-9680.56121739, 2802.47771336,  124.10688025,-0.905874102,-4.659467970,-3.227347517
						, 2160.00000000,  190.19796983, 7746.96653611, 5110.00675409,-6.112325142, 1.527008184,-0.139152358
						, 2520.00000000, 5579.55640211,-3995.61396685,-1518.82108879, 4.767927482, 5.123185302, 4.276837355
						, 2880.00000000,-8650.73082222,-1914.93811531,-3007.03603447, 3.067165127,-4.828384068,-2.515322836
						, 3240.00000000,-5429.79204182, 7574.36493779, 3747.39305224,-4.999442110,-1.800561422,-2.229392830
						, 3600.00000000, 6759.04583734, 2001.58198286, 2783.55192578,-2.180993947, 6.402085603, 3.644723951
						, 3960.00000000,-3791.44531538,-5712.95617881,-4533.48630701, 6.668817493,-2.516382327,-0.082384354
						, 4320.00000000,-9060.47373583, 4658.70952483,  813.68673138,-2.232832783,-4.110453490,-3.157345433});


		tles.add(new String[]{
				"#                       ## fig show lyddane fix error with gsfc ver",
				"1 04632U 70093B   04031.91070959 -.00000084  00000-0  10000-3 0  9955",
				"2 04632  11.4628 273.1101 1450506 207.6000 143.9350  1.20231981 44145"		
		});
		timespans.add(new double[] {  -5184.0  ,   -4896.0  ,      120.00});
		answers.add(new double[]
				{0.00000000, 2347.80296424,  -41921.83248943, 1.80440437, 2.826219248,-0.064488089, 0.570655548
						,-5184.00000000,  -29022.65198659,13813.58727454,-5712.80267321,-1.767679555,-3.235618731,-0.395304103
						,-5064.00000000,  -32984.08733180,  -11125.77646201,-6803.84417503, 0.617181873,-3.379146057, 0.085689502
						,-4944.00000000,  -22101.31140765,  -31583.64479972,-4838.69877409, 2.230212625,-2.166702047, 0.426197002
						,-4896.00000000,  -15134.50562684,  -36908.83645182,-3490.54838260, 2.580788527,-1.524429507, 0.504591144});

		tles.add(new String[]{
				"#                       # perigee = 377.26km, so moderate drag case",
				"1 06251U 62025E   06176.82412014  .00008885  00000-0  12808-3 0  3985",
				"2 06251  58.0579  54.0425 0030035 139.1568 221.1854 15.56387291  6774"
		});
		timespans.add(new double[]{0.0,      2880.0,        120.00});
		answers.add(new double[]{
				0.00000000, 3988.31075664, 5498.96455763, 0.89797552,   -3.290032373, 2.357654671, 6.496624745
				, 120.00000000,-3935.69956200,  409.10445850, 5471.33271168,-3.374783115,-6.635213108,-1.942059568
				, 240.00000000,-1675.12733725,-5683.30642828,-3286.21755062, 5.282494902, 1.508674337,-5.354870297
				, 360.00000000, 4993.62622095, 2890.54698000,-3600.40381497, 0.347334916, 5.707032465, 5.070698608
				, 480.00000000,-1115.08051681, 4015.11401174, 5326.99562621,-5.524281601,-4.765741442, 2.402256112
				, 600.00000000,-4329.09927300,-5176.70664744,  409.64841701, 2.858409521,-2.933088394,-6.509688604
				, 720.00000000, 3692.59934622, -976.24546984,-5623.36605696, 3.897257510, 6.415553560, 1.429110475
				, 840.00000000, 2301.83546129, 5723.92222855, 2814.61298169,-5.110926325,-0.764510009, 5.662122403
				, 960.00000000,-4990.91717381,-2303.43119195, 3920.85861038,-0.993436258,-5.967457108,-4.759113496
				,1080.00000000,  642.27705116,-4332.90041093,-5183.31665126, 5.720540599, 4.216571911,-2.846575629
				,1200.00000000, 4719.78367972, 4798.06718753, -943.59115491,-2.294859691, 3.492501207, 6.408335377
				,1320.00000000,-3299.17173085, 1576.82705064, 5678.67585504,-4.460347214,-6.202028016,-0.885877318
				,1440.00000000,-2777.14624584,-5663.16263954,-2462.55200172, 4.915491722, 0.123330228,-5.896492064
				,1560.00000000, 4992.31517628, 1716.62079156,-4287.86286512, 1.640718593, 6.071570687, 4.338796482
				,1680.00000000,-8.22443985, 4662.21291331, 4905.66241706,-5.891013723,-3.593175668, 3.365101542
				,1800.00000000,-4966.20099448,-4379.59595827, 1349.32834950, 1.763174944,-3.981453044,-6.343278754
				,1920.00000000, 2954.49278836,-2080.66246792,-5754.75183696, 4.895892863, 5.858182498, 0.375473409
				,2040.00000000, 3363.28838816, 5559.55667215, 1956.05302702,-4.587379500, 0.591944643, 6.107840696
				,2160.00000000,-4856.66929447,-1107.04012912, 4557.20827553,-2.304155924,-6.186437234,-3.956552848
				,2280.00000000, -497.84520564,-4863.46206732,-4700.81382494, 5.960063054, 2.996682083,-3.767121954
				,2400.00000000, 5241.61939653, 3910.75723645,-1857.93737532,-1.124833394, 4.406214691, 6.148161320
				,2520.00000000,-2451.38223325, 2610.60080220, 5729.78806587,-5.366561825,-5.500858684, 0.187956900
				,2640.00000000,-3791.87451553,-5378.83123823,-1575.83119978, 4.266273165,-1.199160307,-6.276151093
				,2760.00000000, 4730.53868522,  524.04731031,-4857.29573725, 2.918057378, 6.135412435, 3.495113915
				,2880.00000000, 1159.27778528, 5056.59985227, 4353.49232753,-5.968062655,-2.314791198, 4.230724429

		});


		tles.add(new String[]{
				"#   MOLNIYA 2-14              # 12h resonant ecc in 0.65 to 0.7 range",
				"1 08195U 75081A   06176.33215444  .00000099  00000-0  11873-3 0   813",
				"2 08195  64.1586 279.0717 6877146 264.7651  20.2257  2.00491383225656"	
		});
		timespans.add(new double[]{      0.0,      2880.0 ,       120.00});

		answers.add(new double[]{
				0.00000000, 2350.65823676,  -14783.78885396,-5.85249394, 2.722382501,-3.258249392, 4.497625857
				, 120.00000000,15227.48868399,  -17855.68500165,25274.91543324, 1.079088153, 0.874824795, 2.485928990
				, 240.00000000,19755.93080721,-8604.45438728,37519.74766958, 0.237937545, 1.545947501, 0.986766493
				, 360.00000000,19091.03621457, 3102.88434657,39958.03052804,-0.410555886, 1.640308366,-0.306476685
				, 480.00000000,13829.69980837,13972.76989378,32739.16636990,-1.065348655, 1.280152264,-1.759772762
				, 600.00000000, 3331.83815649,18393.24881332,12743.48910137,-1.882518854,-0.610905292,-4.039444660
				, 720.00000000, 2624.50945843,  -15124.10479525,  471.78492267, 2.689099022,-3.078974224, 4.494386557
				, 840.00000000,15325.03100339,  -17779.04489757,25536.18651564, 1.064341478, 0.891847802, 2.459894124
				, 960.00000000,19773.54729766,-8462.32808285,37622.35553969, 0.229135974, 1.550113427, 0.967243405
				,1080.00000000,19051.06136462, 3255.43331639,39923.87249764,-0.418241329, 1.639218103,-0.325744307
				,1200.00000000,13730.16061310,14092.44392996,32550.81315368,-1.074741253, 1.270601561,-1.784705273
				,1320.00000000, 3148.52885990,18320.33655234,12311.42030614,-1.895428725,-0.677602820,-4.086484432
				,1440.00000000, 2894.52083212,  -15446.17392726,  949.07215903, 2.655105515,-2.909137301, 4.486001106
				,1560.00000000,15421.08151398,  -17700.54773807,25794.96390980, 1.049771765, 0.908514448, 2.434017844
				,1680.00000000,19790.35920241,-8319.59307190,37723.04686120, 0.220382073, 1.554191067, 0.947745761
				,1800.00000000,19010.44425507, 3408.05292016,39887.72738207,-0.425924536, 1.638049516,-0.345055511
				,1920.00000000,13629.81534027,14211.27762726,32359.79801425,-1.084186991, 1.260826068,-1.809803192
				,2040.00000000, 2963.88889730,18240.38211821,11874.29428204,-1.908235380,-0.747109846,-4.133947055
				,2160.00000000, 3160.58722148,  -15750.92893732, 1425.43863412, 2.620648667,-2.748166852, 4.473215893
				,2280.00000000,15515.60802556,  -17620.24479154,26051.22838029, 1.035376367, 0.924835170, 2.408301305
				,2400.00000000,19806.33018701,-8176.26316371,37821.80810970, 0.211676272, 1.558183981, 0.928274174
				,2520.00000000,18969.15299614, 3560.74929658,39849.57956356,-0.433604794, 1.636804823,-0.364411370
				,2640.00000000,13528.63526639,14329.27755304,32166.08772202,-1.093685657, 1.250821976,-1.835070700
				,2760.00000000, 2777.91539298,18153.11142735,11432.04959447,-1.920906281,-0.819595249,-4.181805220
				,2880.00000000, 3422.62444156,  -16039.24995247, 1900.37237796, 2.585931697,-2.595517700, 4.456673424				
		});


		tles.add(new String[]{
				"#   MOLNIYA 1-36              ## fig 12h resonant ecc in 0.7 to 0.715 range",
				"1 09880U 77021A   06176.56157475  .00000421  00000-0  10000-3 0  9814",
				"2 09880  64.5968 349.3786 7069051 270.0229  16.3320  2.00813614112380"	
		});

		timespans.add(new double[]{      0.0 ,     2880.0,        120.00});

		answers.add(new double[]{
				0.00000000,13003.84814201,-2459.28410287,  -22.65309646, 4.256196691, 1.594550490, 4.956412533
				, 120.00000000,19191.47892284, 9239.27966577,26584.90797833,-0.624868630, 1.325098487, 2.496971994
				, 240.00000000,11331.83467245,16512.03165358,38564.16339498,-1.401504791, 0.711424260, 0.924476848
				, 360.00000000,324.12420026,19551.95830106,40555.01861054,-1.593817251, 0.127149475,-0.359458769
				, 480.00000000,-10692.48318438,18056.45883986,33155.98619880,-1.383495521,-0.582021185,-1.744379965
				, 600.00000000,-17077.98297024, 9946.52663223,13884.54935231, 0.044118626,-1.852873622,-3.814565558
				, 720.00000000,13713.13514111,-2190.33173313,  841.17849827, 3.885635429, 1.654830072, 4.944767677
				, 840.00000000,19092.54243954, 9447.09304772,27015.17943129,-0.656531922, 1.309563817, 2.450539914
				, 960.00000000,11107.26343586,16621.59400463,38721.63017687,-1.410271310, 0.698980153, 0.891912866
				,1080.00000000,69.21033037,19571.55029469,40488.76841363,-1.593990803, 0.113959063,-0.390396796
				,1200.00000000,-10912.55389430,17963.63670431,32846.99517581,-1.371768833,-0.601475220,-1.782850337
				,1320.00000000,-17052.15637634, 9635.44196590,13209.94126391, 0.129307577,-1.903083859,-3.884078399
				,1440.00000000,14361.50604667,-1912.69885177, 1701.65242749, 3.549253002, 1.700124746, 4.913825003
				,1560.00000000,18988.55071982, 9652.56604577,27437.58651399,-0.687087467, 1.294164902, 2.404702583
				,1680.00000000,10881.47248988,16729.35935115,38873.50249642,-1.418777755, 0.686553417, 0.859482025
				,1800.00000000,-185.49404015,19589.12162951,40417.15531279,-1.593980904, 0.100683723,-0.421398044
				,1920.00000000,-11130.42958315,17867.52967307,32531.26968096,-1.359566980,-0.621246101,-1.821690628
				,2040.00000000,-17011.04650738, 9315.14507190,12522.94701443, 0.220404171,-1.955200673,-3.954770592
				,2160.00000000,14954.55962947,-1628.62056789, 2555.93855659, 3.243521493, 1.733502327, 4.868795290
				,2280.00000000,18879.63232171, 9855.75657561,27852.28448879,-0.716587932, 1.278898400, 2.359436816
				,2400.00000000,10654.46639152,16835.36144156,39019.83813324,-1.427025605, 0.674141788, 0.827176664
				,2520.00000000,-439.96478888,19604.69115460,40340.19592966,-1.593781222, 0.087321173,-0.452467159
				,2640.00000000,-11346.00303918,17768.12336259,32208.78218278,-1.346867396,-0.641343627,-1.860910781
				,2760.00000000,-16953.54643512, 8985.33406645,11823.43047448, 0.318001835,-2.009333032,-4.026588486
				,2880.00000000,15497.27201345,-1339.87914997, 3401.97231437, 2.965110323, 1.757372241, 4.813568716
		});
	}

	private void run_test_number(int tn)
	{
		try
		{
			test_number = tn;
			String[] _tle_strings_ = tles.get(tn);
			double[] _timespan_ = timespans.get(tn);
			Tle tle = new Tle(_tle_strings_[0], _tle_strings_[1], _tle_strings_[2]);
			System.out.println(tle);
			RunTle(tle, _timespan_[0], _timespan_[1], _timespan_[2]);
		}
		catch (TleException ex)
		{
			fail (ex.getMessage());
		}
	}

	@Test
	public void test1() {
		run_test_number(0);	
	}
	@Test
	public void test2() {
		run_test_number(1);
	}
	@Test
	public void test3() {
		run_test_number(2);
	}
	@Test
	public void test4() {
		run_test_number(3);
	}
	@Test
	public void test5() {
		run_test_number(4);
	}
	@Test
	public void test6()
	{
		String[] _tle_strings_ = tles.get(0);
		Tle tle = null;
		try {
			tle = new Tle(_tle_strings_[0],_tle_strings_[1],_tle_strings_[2]);
		} catch (TleException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		SGP4 model = new SGP4();
		try {
			model.SetTle(tle);
		} catch (SatelliteException e1) {
			e1.printStackTrace();
		}
		for (int i=0;i<1000;i++)
		{
			Eci eci = null;
			try {
				eci = model.FindPosition(tle.Epoch().plus(i*1000, ChronoUnit.MILLIS));
				//eci = model.FindPosition(i);
			} catch (SatelliteException | DecayedException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			Vector4d  position = eci.Position();
			Vector4d velocity = eci.Velocity();
			System.out.println(position);
			System.out.println(velocity);
		}		
	}
}
